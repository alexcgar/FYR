Desplegar usando Waitress en Linux
Requisitos previos:
Un servidor Linux (puedes usar AWS, DigitalOcean, o cualquier VPS).
Tener instalado Python y Node.js.
Pasos:
1. Configurar el servidor
Actualizar paquetes:

bash
Copiar código
sudo apt update && sudo apt upgrade -y
Instalar Python y Node.js:

bash
Copiar código
sudo apt install python3 python3-pip python3-venv nodejs npm -y
Instalar Git:

bash
Copiar código
sudo apt install git -y
2. Clonar el repositorio desde GitHub
En tu servidor, clona el proyecto:

bash
Copiar código
git clone https://github.com/tu-usuario/tu-repo.git
cd tu-repo
3. Configurar el backend Flask
Crear un entorno virtual para Python:

bash
Copiar código
python3 -m venv venv
source venv/bin/activate
Instalar dependencias de Flask:

bash
Copiar código
pip install -r requirements.txt
Configurar Waitress: Crea un archivo run_waitress.py (si no lo tienes ya) con el siguiente contenido:

python
Copiar código
from waitress import serve
from app import app  # Reemplaza "app" con el nombre de tu archivo o módulo principal

serve(app, host='0.0.0.0', port=8000)
Probar el backend localmente:

bash
Copiar código
python run_waitress.py
Accede a tu servidor en http://<IP-del-servidor>:8000 para verificar que el backend funcione.

4. Configurar el frontend React
Ir al directorio del frontend:

bash
Copiar código
cd frontend
Instalar dependencias:

bash
Copiar código
npm install
Compilar la aplicación para producción:

bash
Copiar código
npm run build
Mover el frontend al backend: Copia los archivos compilados al backend para que Waitress pueda servirlos como estáticos. Por ejemplo, puedes mover el contenido de build/ a una carpeta estática en tu backend:

bash
Copiar código
cp -r build/* ../static/
Asegúrate de que tu Flask esté configurado para servir los archivos de la carpeta static.

5. Configurar un servicio systemd
Crea un archivo de servicio para ejecutar Waitress automáticamente:

bash
Copiar código
sudo nano /etc/systemd/system/flask-app.service
Agrega el siguiente contenido:

ini
Copiar código
[Unit]
Description=Flask Application with Waitress
After=network.target

[Service]
User=tu-usuario
WorkingDirectory=/ruta/a/tu-repo
ExecStart=/ruta/a/tu-repo/venv/bin/python run_waitress.py
Restart=always

[Install]
WantedBy=multi-user.target
Guarda y habilita el servicio:

bash
Copiar código
sudo systemctl daemon-reload
sudo systemctl enable flask-app
sudo systemctl start flask-app
6. Configurar un proxy con NGINX (opcional)
Instala NGINX:

bash
Copiar código
sudo apt install nginx -y
Configura un archivo en NGINX:

bash
Copiar código
sudo nano /etc/nginx/sites-available/flask-app
Agrega la configuración:

nginx
Copiar código
server {
    listen 80;
    server_name tu-dominio.com;  # Reemplaza con tu dominio o IP pública

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
Activa la configuración:

bash
Copiar código
sudo ln -s /etc/nginx/sites-available/flask-app /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx
Ahora tu aplicación debería estar accesible desde http://tu-dominio.com o la IP de tu servidor.

